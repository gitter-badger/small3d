ADD_LIBRARY(small3d BoundingBoxes.cpp Exception.cpp GetTokens.cpp
  Image.cpp Logger.cpp MathFunctions.cpp Model.cpp
  ModelLoader.cpp Renderer.cpp SceneObject.cpp Text.cpp
  WavefrontLoader.cpp SoundData.cpp Sound.cpp)
  
TARGET_INCLUDE_DIRECTORIES(small3d PUBLIC "${small3d_SOURCE_DIR}/small3d/include/small3d")

# Link OpenGL things and set to use C++11

INCLUDE_DIRECTORIES(${OPENGL_INCLUDE_DIR})
TARGET_LINK_LIBRARIES(small3d PUBLIC ${OPENGL_LIBRARIES})

if(NOT WIN32 OR MINGW)
  IF(APPLE)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -stdlib=libc++")
  ELSE()
    target_compile_options(small3d PUBLIC "-std=c++11" "-Wl,--no-as-needed") # Ubuntu if gcc problems
  ENDIF()
endif()

INCLUDE_DIRECTORIES(${SDL2_INCLUDE_DIR})
TARGET_LINK_LIBRARIES(small3d PUBLIC "${SDL2_LIBRARY}")

INCLUDE_DIRECTORIES(${SDL2_TTF_INCLUDE_DIRS})
TARGET_LINK_LIBRARIES(small3d PUBLIC "${SDL2_TTF_LIBRARIES}")

INCLUDE_DIRECTORIES(${GLEW_INCLUDE_DIRS})
TARGET_LINK_LIBRARIES(small3d PUBLIC "${GLEW_LIBRARIES}")

INCLUDE_DIRECTORIES(${PNG_INCLUDE_DIRS})
ADD_DEFINITIONS(${PNG_DEFINITIONS})
TARGET_LINK_LIBRARIES(small3d PUBLIC "${PNG_LIBRARIES}")

INCLUDE_DIRECTORIES("${GLM_INCLUDE_DIRS}")

INCLUDE_DIRECTORIES(${OGG_INCLUDE_DIRS})
TARGET_LINK_LIBRARIES(small3d PUBLIC "${OGG_LIBRARIES}")

INCLUDE_DIRECTORIES(${VORBIS_INCLUDE_DIR})
TARGET_LINK_LIBRARIES(small3d PUBLIC "${VORBIS_LIBRARIES}")

INCLUDE_DIRECTORIES(${PORTAUDIO_INCLUDE_DIRS})
TARGET_LINK_LIBRARIES(small3d PUBLIC "${PORTAUDIO_LIBRARIES}")

IF(APPLE)
	FIND_LIBRARY(AUDIOUNIT_LIBRARY AudioUnit)
	FIND_LIBRARY(AUDIOTOOLBOX_LIBRARY AudioToolbox)
	FIND_LIBRARY(COREAUDIO_LIBRARY CoreAudio)
	TARGET_LINK_LIBRARIES(small3d PUBLIC "${COREAUDIO_LIBRARY}" "${AUDIOUNIT_LIBRARY}" "${AUDIOTOOLBOX_LIBRARY}")
ENDIF(APPLE)

IF(WIN32 AND NOT MINGW)
  SET_TARGET_PROPERTIES(small3d PROPERTIES LINK_FLAGS "/NODEFAULTLIB:\"LIBCMTD\" /NODEFAULTLIB:\"LIBCMT\"")
ENDIF()

ADD_EXECUTABLE(small3dTest main.cpp)

TARGET_INCLUDE_DIRECTORIES(small3dTest PUBLIC "${small3d_SOURCE_DIR}/small3d/include")

FIND_PACKAGE(GTest REQUIRED)
INCLUDE_DIRECTORIES(${GTEST_INCLUDE_DIRS})
TARGET_LINK_LIBRARIES(small3dTest PUBLIC ${GTEST_BOTH_LIBRARIES})

TARGET_LINK_LIBRARIES(small3dTest PUBLIC small3d)